<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Programming - Category - Kata learns to code</title><link>/categories/programming/</link><description>Programming - Category - Kata learns to code</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 02 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="/categories/programming/" rel="self" type="application/rss+xml"/><item><title>Falco + OpenAPI + Scalar</title><link>/posts/2025/08-02-falco-openapi-scalar/</link><pubDate>Sat, 02 Aug 2025 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2025/08-02-falco-openapi-scalar/</guid><description>&lt;p>This post describe an ASP.NET project template using F#, Falco, Falco.OpenApi, Swashbuckle, and Scalar.&lt;/p></description></item><item><title>My favorites F# JSON options</title><link>/posts/2025/08-02-my-favorites-fsharp-json-options/</link><pubDate>Sat, 02 Aug 2025 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2025/08-02-my-favorites-fsharp-json-options/</guid><description>&lt;p>This post describe my favorites F# JSON options.&lt;/p></description></item><item><title>Some thoughts on monads</title><link>/posts/2017/11-30-some-thoughts-on-monads/</link><pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2017/11-30-some-thoughts-on-monads/</guid><description><![CDATA[<p>I know, I know, the world does not need yet another explanation on monads. There have been a lot of related articles you can find on the Internet. Still, most of them are so math-intensive that we as software developers (we aren&rsquo;t good at math) don&rsquo;t want to read. So please give me a try to explain monads to you. I think they are worth knowing about. No math knowledge is required. What I want from you is just a basic knowledge of programming with types and functions.</p>]]></description></item><item><title>Null References: The Billion Dollar Mistake</title><link>/posts/2016/08-03-null-references-the-billion-dollar-mistake/</link><pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/08-03-null-references-the-billion-dollar-mistake/</guid><description><![CDATA[<p><code>Null</code> is clearly evil. We as human tend to forget to check <code>null</code>, and boom&hellip; crash!!!</p>]]></description></item><item><title>How do you use Exceptions?</title><link>/posts/2016/07-16-how-do-you-use-exceptions/</link><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/07-16-how-do-you-use-exceptions/</guid><description>&lt;p>Exceptions are a very common concept in most of languages nowadays. In this article we will discuss why exceptions are needed, checked vs. unchecked exceptions, and why C# doesn&amp;rsquo;t have checked exceptions.&lt;/p></description></item><item><title>How to think about MVC, MVP, PM, and MVVM?</title><link>/posts/2016/03-17-how-to-think-about-mvc-mvp-pm-and-mvvm/</link><pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/03-17-how-to-think-about-mvc-mvp-pm-and-mvvm/</guid><description>&lt;p>This article is about my personal explanation of the famous design patterns: Model View Controller (MVC), Model View Presenter (MVP), Presentation Model (PM), and Model View ViewModel (MVVM).&lt;/p></description></item><item><title>GoF Builder Pattern</title><link>/posts/2016/03-14-gof-builder-pattern/</link><pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/03-14-gof-builder-pattern/</guid><description><![CDATA[<p>Builder Pattern and Factory Pattern are pretty similar in a way: both of them encapsulate the details of object-creation processes. However, in cases there are many complicated processes to create various representations of objects, and those processes share a common trait, Builder Pattern is the better choice.</p>
<p>Let&rsquo;s say we have two processes to build a house: Asian process and European one. We will start with Factory Pattern and gradually adapt it to Builder Pattern. A possible implementation of Factory Pattern could be:</p>]]></description></item><item><title>Why object persistence is hard?</title><link>/posts/2016/02-28-why-object-persistence-is-hard/</link><pubDate>Sun, 28 Feb 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/02-28-why-object-persistence-is-hard/</guid><description><![CDATA[<p>Object persistence &ndash; for example, saving/loading objects to/from a database &ndash; is easy, especially when using an ORM framework. It is easy because it breaks principles of OO design.</p>]]></description></item><item><title>The two factories</title><link>/posts/2016/02-27-the-two-factories/</link><pubDate>Sat, 27 Feb 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/02-27-the-two-factories/</guid><description>&lt;p>Have you ever hesitated between these two implementation of the Factory Pattern:&lt;/p></description></item><item><title>OOP vs. ECS</title><link>/posts/2016/01-26-oop-vs-ecs/</link><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/01-26-oop-vs-ecs/</guid><description>&lt;p>In recent years, Entity-Component System (ECS) has been recognized as the most notable architecture for game development. There are many good articles about the architecture that can be found on the Internet, some of them are:&lt;/p></description></item></channel></rss>