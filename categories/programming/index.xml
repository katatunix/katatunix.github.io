<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Programming - Category - Nghia Bui</title><link>/categories/programming/</link><description>Programming - Category - Nghia Bui</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="/categories/programming/" rel="self" type="application/rss+xml"/><item><title>Some thoughts on monads</title><link>/posts/2017/11-30-some-thoughts-on-monads/</link><pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2017/11-30-some-thoughts-on-monads/</guid><description><![CDATA[<p>I know, I know, the world does not need yet another explanation on monads. There have been a lot of related articles you can find on the Internet. Still, most of them are so math-intensive that we as software developers (we aren&rsquo;t good at math) don&rsquo;t want to read. So please give me a try to explain monads to you. I think they are worth knowing about. No math knowledge is required. What I want from you is just a basic knowledge of programming with types and functions.</p>]]></description></item><item><title>Null References: The Billion Dollar Mistake</title><link>/posts/2016/08-03-null-references-the-billion-dollar-mistake/</link><pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/08-03-null-references-the-billion-dollar-mistake/</guid><description><![CDATA[<p><code>Null</code> is clearly evil. We as human tend to forget to check <code>null</code>, and boom&hellip; crash!!! Documentation may help, but again we still forget reading documents. Worse, not all documents are correct and up-to-date 100%. Even if we remember to do every <code>null</code> check, our code would be very messy.</p>
<p>So what is the solution?</p>
<p>Checked-exceptions can help but must be used with care otherwise nearly every function/method in our programs could throw checked-exceptions, and <code>try</code>/<code>catch</code> statements would appear everywhere.</p>]]></description></item><item><title>How do you use Exceptions?</title><link>/posts/2016/07-16-how-do-you-use-exceptions/</link><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/07-16-how-do-you-use-exceptions/</guid><description><![CDATA[<p>Exceptions are a very common concept in most of languages nowadays. In this article we will discuss why exceptions are needed, checked vs. unchecked exceptions, and why C# doesn&rsquo;t have checked exceptions.</p>
<h2 id="in-the-old-days-defensive-code-were-a-mess">In the old days, defensive code were a mess</h2>
<p>Before exceptions were invented, defensive code had been overwhelmed with a lot of error checking and recovery from those errors, for example:</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">handle</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// style #1: error is embedded in the return value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">errFoo</span> <span class="o">=</span> <span class="nf">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">errFoo</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// recovery and may return  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// style #2: error is assigned to the output parameter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">errBar</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="nf">bar</span><span class="p">(...,</span> <span class="o">&amp;</span><span class="n">errBar</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">errBar</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// recovery and may return  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// do something with value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// style #3: a separated &amp; global function to get error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">kaka</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">errKaka</span> <span class="o">=</span> <span class="nf">getKakaError</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">errKata</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// recovery and may return  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// the rest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></div></div>
<p>The style #1 is most intuitive but it requires the return value to have a slot for storing the error. If that slot is not available, we can use the style #2 however this style may create a long list of parameters which is often annoying. The style #3 is quite common in OpenGL, OpenAL, EGL with a disadvantage is that we are very likely to forget the error checking.</p>]]></description></item><item><title>How to think about MVC, MVP, PM, and MVVM?</title><link>/posts/2016/03-17-how-to-think-about-mvc-mvp-pm-and-mvvm/</link><pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/03-17-how-to-think-about-mvc-mvp-pm-and-mvvm/</guid><description><![CDATA[<p>This article is about my personal explanation of the famous design patterns: Model View Controller (MVC), Model View Presenter (MVP), Presentation Model (PM), and Model View ViewModel (MVVM).</p>
<p>Let&rsquo;s start with Model.</p>
<h2 id="model-the-core-of-an-application">Model: the core of an application</h2>
<p>At the core of an application is a component called Model where <em>business objects</em> and <em>use-case objects</em> live. Normally, the outside world interacts with the Model by sending input to the use-case objects, these objects then manipulate the business ones and finally return output back to the outside world.</p>]]></description></item><item><title>GoF Builder Pattern</title><link>/posts/2016/03-14-gof-builder-pattern/</link><pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/03-14-gof-builder-pattern/</guid><description><![CDATA[<p>Builder Pattern and Factory Pattern are pretty similar in a way: both of them encapsulate the details of object-creation processes. However, in cases there are many complicated processes to create various representations of objects, and those processes share a common trait, Builder Pattern is the better choice.</p>
<p>Let&rsquo;s say we have two processes to build a house: Asian process and European one. We will start with Factory Pattern and gradually adapt it to Builder Pattern. A possible implementation of Factory Pattern could be:</p>]]></description></item><item><title>Why object persistence is hard?</title><link>/posts/2016/02-28-why-object-persistence-is-hard/</link><pubDate>Sun, 28 Feb 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/02-28-why-object-persistence-is-hard/</guid><description><![CDATA[<p>Object persistence &ndash; for example, saving/loading objects to/from a database &ndash; is easy, especially when using an ORM framework. It is easy because it breaks principles of OO design.</p>
<blockquote>
<p>When objects are used as data structures it is a design smell; and it always has been. When tools like Hibernate call themselves object-relational mappers, they are incorrect. ORMs don&rsquo;t map relational data to objects; they map relational data to data structures. Those data structures are not objects.<br>
&mdash; Uncle Bob in <a href="http://blog.cleancoder.com/uncle-bob/2014/11/24/FPvsOO.html" target="_blank" rel="noopener noreffer ">OO vs FP</a></p>]]></description></item><item><title>The two factories</title><link>/posts/2016/02-27-the-two-factories/</link><pubDate>Sat, 27 Feb 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/02-27-the-two-factories/</guid><description><![CDATA[<p>Have you ever hesitated between these two implementation of the Factory Pattern:</p>
<p>Factory #1</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">AnimalFactory</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">Animal</span><span class="w"> </span><span class="nf">createAnimal</span><span class="p">(</span><span class="n">String</span><span class="w"> </span><span class="n">type</span><span class="p">)</span><span class="w"> </span><span class="kd">throws</span><span class="w"> </span><span class="n">Exception</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">type</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="s">&#34;dog&#34;</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Dog</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">type</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="s">&#34;cat&#34;</span><span class="p">))</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Cat</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Exception</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></div></div>
<p>Factory #2</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">AnimalFactory</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">Animal</span><span class="w"> </span><span class="nf">createDog</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Dog</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="n">Animal</span><span class="w"> </span><span class="nf">createCat</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Cat</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></div></div>
<p>Which one is the best?</p>]]></description></item><item><title>OOP vs. ECS</title><link>/posts/2016/01-26-oop-vs-ecs/</link><pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/01-26-oop-vs-ecs/</guid><description><![CDATA[<p>In recent years, Entity-Component System (ECS) has been recognized as the most notable architecture for game development. There are many good articles about the architecture that can be found on the Internet, some of them are:</p>
<ul>
<li><a href="http://t-machine.org/index.php/2007/09/03/entity-systems-are-the-future-of-mmog-development-part-1/" target="_blank" rel="noopener noreffer ">Entity Systems are the future of MMOG development</a></li>
<li><a href="http://www.richardlord.net/blog/what-is-an-entity-framework" target="_blank" rel="noopener noreffer ">What is an entity system framework for game development?</a></li>
<li><a href="http://www.richardlord.net/blog/why-use-an-entity-framework" target="_blank" rel="noopener noreffer ">Why use an entity system framework for game development?</a></li>
<li><a href="http://www.gamedev.net/page/resources/_/technical/game-programming/understanding-component-entity-systems-r3013" target="_blank" rel="noopener noreffer ">Understanding Component-Entity-Systems</a></li>
<li><a href="http://gamedev.stackexchange.com/a/31491" target="_blank" rel="noopener noreffer ">gamedev.stackexchange.com</a></li>
<li><a href="http://entity-systems.wikidot.com/" target="_blank" rel="noopener noreffer ">Entity Systems Wiki</a></li>
<li><a href="https://en.wikipedia.org/wiki/Entity_component_system" target="_blank" rel="noopener noreffer ">Entity component system</a></li>
</ul>
<p>Of course these articles are excellent and well-written, but one thing I don&rsquo;t like about them is that they are not fair at comparing OOP and ECS. They think that class inheritance is fundamental to OOP thus they blame OOP in order to praise ECS as a preference of <em>composition over inheritance</em>.</p>]]></description></item><item><title>Imperative vs. Declarative</title><link>/posts/2015/11-11-imperative-vs-declarative/</link><pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2015/11-11-imperative-vs-declarative/</guid><description><![CDATA[<p>Wikipedia defines imperative and declarative programming as:</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Imperative_programming" target="_blank" rel="noopener noreffer ">imperative programming</a> is a style that uses statements that change a program’s state&hellip; focuses on describing HOW a program operates.</p>
<p><a href="https://en.wikipedia.org/wiki/Declarative_programming" target="_blank" rel="noopener noreffer ">declarative programming</a> is a style that expresses the logic of a computation without describing its control flow&hellip; focuses on describing WHAT the program should accomplish in terms of the problem domain.</p></blockquote>
<p>When we read the definition of something, we tend to focus on terms that are already familiar to us, and then use those terms as a metaphor in order to understand the definition. Here in this case, we should think that, for short, imperative programming is about HOW whereas declarative one is about WHAT. Of course, those definitions are correct, but somehow confused and thus difficult to understand. How can we write a program without describing HOW? Finally, the computer must do the job and it must know exactly HOW to do. It turns out that the WHAT here is still a little of HOW, but in a different way.</p>]]></description></item><item><title>Thứ tự từ điển</title><link>/posts/2008/09-29-thu-tu-tu-dien/</link><pubDate>Mon, 29 Sep 2008 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2008/09-29-thu-tu-tu-dien/</guid><description><![CDATA[<p>Các bài toán về thứ tự từ điển thì có cách giải thông thường là: viết ra giấy vài trường hợp, để ý phân tích, mò ra quy luật, từ đó có phương án implement tốt nhất.</p>
<p>Xét ví dụ bài toán phát biểu như sau:</p>
<blockquote>
<p>Cho số nguyên dương $n$:</p>
<ol>
<li>Với dãy $a$ là một hoán vị các số nguyên từ $1$ đến $n$, hãy tính thứ tự từ điển của hoán vị này.</li>
<li>Ngược lại, cho số tự nhiên $k$ bé hơn $n!$, hãy tìm dãy $a$ là hoán vị có số thứ tự $k$.</li>
</ol>
<p>Lưu ý là thứ tự bắt đầu tính từ $0$.</p>]]></description></item></channel></rss>