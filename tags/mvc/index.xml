<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>MVC - Tag - Nghia Bui</title><link>/tags/mvc/</link><description>MVC - Tag - Nghia Bui</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 17 Mar 2016 00:00:00 +0000</lastBuildDate><atom:link href="/tags/mvc/" rel="self" type="application/rss+xml"/><item><title>How to think about MVC, MVP, PM, and MVVM?</title><link>/posts/2016/03-17-how-to-think-about-mvc-mvp-pm-and-mvvm/</link><pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate><author>xxxx</author><guid>/posts/2016/03-17-how-to-think-about-mvc-mvp-pm-and-mvvm/</guid><description><![CDATA[<p>This article is about my personal explanation of the famous design patterns: Model View Controller (MVC), Model View Presenter (MVP), Presentation Model (PM), and Model View ViewModel (MVVM).</p>
<p>Let&rsquo;s start with Model.</p>
<h2 id="model-the-core-of-an-application">Model: the core of an application</h2>
<p>At the core of an application is a component called Model where <em>business objects</em> and <em>use-case objects</em> live. Normally, the outside world interacts with the Model by sending input to the use-case objects, these objects then manipulate the business ones and finally return output back to the outside world.</p>]]></description></item></channel></rss>