<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Declarative - Tag - Nghia Bui</title><link>/tags/declarative/</link><description>Declarative - Tag - Nghia Bui</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 11 Nov 2015 00:00:00 +0000</lastBuildDate><atom:link href="/tags/declarative/" rel="self" type="application/rss+xml"/><item><title>Imperative vs. Declarative</title><link>/posts/2015/11-11-imperative-vs-declarative/</link><pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate><author>xxxx</author><guid>/posts/2015/11-11-imperative-vs-declarative/</guid><description><![CDATA[<p>Wikipedia defines imperative and declarative programming as:</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Imperative_programming" target="_blank" rel="noopener noreffer ">imperative programming</a> is a style that uses statements that change a programâ€™s state&hellip; focuses on describing HOW a program operates.</p>
<p><a href="https://en.wikipedia.org/wiki/Declarative_programming" target="_blank" rel="noopener noreffer ">declarative programming</a> is a style that expresses the logic of a computation without describing its control flow&hellip; focuses on describing WHAT the program should accomplish in terms of the problem domain.</p></blockquote>
<p>When we read the definition of something, we tend to focus on terms that are already familiar to us, and then use those terms as a metaphor in order to understand the definition. Here in this case, we should think that, for short, imperative programming is about HOW whereas declarative one is about WHAT. Of course, those definitions are correct, but somehow confused and thus difficult to understand. How can we write a program without describing HOW? Finally, the computer must do the job and it must know exactly HOW to do. It turns out that the WHAT here is still a little of HOW, but in a different way.</p>]]></description></item></channel></rss>