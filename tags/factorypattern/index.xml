<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>FactoryPattern - Tag - Kata learns to code</title><link>/tags/factorypattern/</link><description>FactoryPattern - Tag - Kata learns to code</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 27 Feb 2016 00:00:00 +0000</lastBuildDate><atom:link href="/tags/factorypattern/" rel="self" type="application/rss+xml"/><item><title>The two factories</title><link>/posts/2016/02-27-the-two-factories/</link><pubDate>Sat, 27 Feb 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/02-27-the-two-factories/</guid><description>&lt;p>Have you ever hesitated between these two implementation of the Factory Pattern:&lt;/p></description></item><item><title>Factory patterns and DIP</title><link>/posts/2015/02-27-factory-patterns-and-dip/</link><pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2015/02-27-factory-patterns-and-dip/</guid><description><![CDATA[<p>Every line of code that uses the <code>new</code> keyword may violate the <a href="http://en.wikipedia.org/wiki/Dependency_inversion_principle" target="_blank" rel="noopener noreffer ">Dependency Inversion Principle</a> (DIP). Indeed, a class after <code>new</code> must be always concrete:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span><span class="w"> </span><span class="nf">test</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">Shape</span><span class="w"> </span><span class="n">obj</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Circle</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></div></div>
<p>In this example, after creating <code>obj</code>, we use and treat it like a <code>Shape</code> &ndash; an abstract class. So why does the <code>test()</code> method have to depend on <code>Circle</code> &ndash; a concrete class? If the <code>Circle</code> class is unstable, depending on it is terrible because, e.g., when its name changes to <code>Kircle</code>, the <code>test()</code> method must changes also. We want to keep <code>test()</code> stable. What should we do?</p>]]></description></item></channel></rss>