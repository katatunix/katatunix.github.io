<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Nghia Bui</title><link>/</link><description>Welcome to my world - I talk to the wind</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 03 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Nôm na về chữ ký điện tử</title><link>/posts/2023/04-14-nom-na-ve-chu-ky-dien-tu/</link><pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2023/04-14-nom-na-ve-chu-ky-dien-tu/</guid><description><![CDATA[<p>Nhân dịp <a href="https://vietnamnet.vn/nguoi-dan-ha-noi-duoc-cap-chu-ky-so-mien-phi-tren-pho-di-bo-ho-guom-2130229.html" target="_blank" rel="noopener noreffer ">người dân Hà Nội được cấp chữ ký số miễn phí trên phố đi bộ hồ Gươm</a>, cùng tìm hiểu &ndash; hết sức nôm na &ndash; về chữ ký điện tử.</p>
<p><a href="https://en.wikipedia.org/wiki/Digital_signature" target="_blank" rel="noopener noreffer ">Chữ ký điện tử</a> là một ứng dụng của mật mã hoá bất đối xứng <a href="https://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="noopener noreffer ">asymmetric cryptography</a>.</p>
<p>Đại khái là, mỗi người sở hữu một cặp private key + public key. Private key phải giữ bí mật. Public key thì công khai thoải mái.</p>]]></description></item><item><title>"Kiểm soát" Bitcoin?</title><link>/posts/2021/05-19-kiem-soat-bitcoin/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2021/05-19-kiem-soat-bitcoin/</guid><description><![CDATA[<p>Sau sự kiện elon musk thao túng giá bitcoin, rất nhiều bạn mỉa mai phàn nàn: &ldquo;mục tiêu của bitcoin là để không bị chính phủ kiểm soát, nhưng rốt cục lại bị cá nhân/mập kiểm soát, hố hố&rdquo;.</p>
<p>Cần phải hiểu đúng nghĩa của từ &ldquo;kiểm soát&rdquo; trong ngữ cảnh này. &ldquo;Kiểm soát&rdquo; ở đây không phải là về &ldquo;giá&rdquo;, mà là về (1) <em>phát hành</em> và (2) <em>lưu thông</em>.</p>]]></description></item><item><title>Some thoughts on monads</title><link>/posts/2017/11-30-some-thoughts-on-monads/</link><pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2017/11-30-some-thoughts-on-monads/</guid><description><![CDATA[<p>I know, I know, the world does not need yet another explanation on monads. There have been a lot of related articles you can find on the Internet. Still, most of them are so math-intensive that we as software developers (we aren&rsquo;t good at math) don&rsquo;t want to read. So please give me a try to explain monads to you. I think they are worth knowing about. No math knowledge is required. What I want from you is just a basic knowledge of programming with types and functions.</p>]]></description></item><item><title>Giải bài 3 - IMO 2017</title><link>/posts/2017/11-12-giai-bai-3-imo-2017/</link><pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2017/11-12-giai-bai-3-imo-2017/</guid><description><![CDATA[<p>Một bài cực khó của kì thi Toán quốc tế (IMO) 2017 diễn ra tại Rio de Janeiro vào tháng 7 vừa qua. Theo quan sát của một thanh niên an nam thì chỉ có duy nhất một <a href="https://www.imo-official.org/team_r.aspx?code=RUS&amp;year=2017" target="_blank" rel="noopener noreffer ">thanh niên nga ngố</a> tên là Mikhail Ivanov giải trọn vẹn bài này trong phòng thi. Thanh niên an nam cũng cố giải, nhưng trong một phòng khác.</p>
<h2 id="đề-bài">Đề bài</h2>
<p>Một cô thợ săn và một con thỏ tàng hình chơi trò chơi sau trên mặt phẳng. Điểm xuất phát $A_0$ của con thỏ và điểm xuất phát $B_0$ của cô thợ săn trùng nhau. Sau $n-1$ lượt chơi, con thỏ ở điểm $A_{n-1}$ và cô thợ săn ở điểm $B_{n-1}$. Ở lượt chơi thứ $n$, có ba điều lần lượt xảy ra theo thứ tự dưới đây:</p>]]></description></item><item><title>Gradient Boosting</title><link>/posts/2016/12-08-gradient-boosting/</link><pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/12-08-gradient-boosting/</guid><description><![CDATA[<p>Gradient Boosting is a machine learning technique which boosts weak learners to strong ones by using gradient.</p>
<p>My explanation here: <a href="https://www.slideshare.net/katatunix/gradient-boosting" target="_blank" rel="noopener noreffer ">https://www.slideshare.net/katatunix/gradient-boosting</a></p>]]></description></item><item><title>Hidden Markov Model</title><link>/posts/2016/11-11-hidden-markov-model/</link><pubDate>Fri, 11 Nov 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/11-11-hidden-markov-model/</guid><description><![CDATA[<p>My simple explanation of the <a href="https://en.wikipedia.org/wiki/Hidden_Markov_model" target="_blank" rel="noopener noreffer ">Hidden Markov Model</a>.</p>
<p>Shared here: <a href="https://www.slideshare.net/katatunix/hidden-markov-model-67982915" target="_blank" rel="noopener noreffer ">https://www.slideshare.net/katatunix/hidden-markov-model-67982915</a></p>]]></description></item><item><title>The universe is 4D?</title><link>/posts/2016/08-11-the-universe-is-4d/</link><pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/08-11-the-universe-is-4d/</guid><description><![CDATA[<p><a href="http://withouttheloop.com/articles/2016-08-09-mathematics/" target="_blank" rel="noopener noreffer ">This statement</a>:</p>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw" aria-hidden="true"></i>Quote<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Little did they know that the universe is four dimensional and even the orbit of planets is an illusion produced when straight motion in a four dimensional space is projected into three dimensions (or something).</div>
        </div>
    </div>
<p>immediately reminded me about <a href="https://en.wikipedia.org/wiki/Projective_geometry" target="_blank" rel="noopener noreffer ">projective geometry</a> which is one of the most beautiful systems of mathematics.</p>
<p>So the universe is 4D? I&rsquo;m not sure. But if it was true then we could use the concepts of projective geometry to interpret something interesting.</p>]]></description></item><item><title>Null References: The Billion Dollar Mistake</title><link>/posts/2016/08-03-null-references-the-billion-dollar-mistake/</link><pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/08-03-null-references-the-billion-dollar-mistake/</guid><description><![CDATA[<p><code>Null</code> is clearly evil. We as human tend to forget to check <code>null</code>, and boom&hellip; crash!!! Documentation may help, but again we still forget reading documents. Worse, not all documents are correct and up-to-date 100%. Even if we remember to do every <code>null</code> check, our code would be very messy.</p>
<p>So what is the solution?</p>
<p>Checked-exceptions can help but must be used with care otherwise nearly every function/method in our programs could throw checked-exceptions, and <code>try</code>/<code>catch</code> statements would appear everywhere.</p>]]></description></item><item><title>How do you use Exceptions?</title><link>/posts/2016/07-16-how-do-you-use-exceptions/</link><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/07-16-how-do-you-use-exceptions/</guid><description><![CDATA[<p>Exceptions are a very common concept in most of languages nowadays. In this article we will discuss why exceptions are needed, checked vs. unchecked exceptions, and why C# doesn&rsquo;t have checked exceptions.</p>
<h2 id="in-the-old-days-defensive-code-were-a-mess">In the old days, defensive code were a mess</h2>
<p>Before exceptions were invented, defensive code had been overwhelmed with a lot of error checking and recovery from those errors, for example:</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">handle</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// style #1: error is embedded in the return value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">errFoo</span> <span class="o">=</span> <span class="nf">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">errFoo</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// recovery and may return  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// style #2: error is assigned to the output parameter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">errBar</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="nf">bar</span><span class="p">(...,</span> <span class="o">&amp;</span><span class="n">errBar</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">errBar</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// recovery and may return  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// do something with value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// style #3: a separated &amp; global function to get error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">kaka</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">errKaka</span> <span class="o">=</span> <span class="nf">getKakaError</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">errKata</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// recovery and may return  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// the rest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></div></div>
<p>The style #1 is most intuitive but it requires the return value to have a slot for storing the error. If that slot is not available, we can use the style #2 however this style may create a long list of parameters which is often annoying. The style #3 is quite common in OpenGL, OpenAL, EGL with a disadvantage is that we are very likely to forget the error checking.</p>]]></description></item><item><title>How to think about MVC, MVP, PM, and MVVM?</title><link>/posts/2016/03-17-how-to-think-about-mvc-mvp-pm-and-mvvm/</link><pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate><author>Nghia</author><guid>/posts/2016/03-17-how-to-think-about-mvc-mvp-pm-and-mvvm/</guid><description><![CDATA[<p>This article is about my personal explanation of the famous design patterns: Model View Controller (MVC), Model View Presenter (MVP), Presentation Model (PM), and Model View ViewModel (MVVM).</p>
<p>Let&rsquo;s start with Model.</p>
<h2 id="model-the-core-of-an-application">Model: the core of an application</h2>
<p>At the core of an application is a component called Model where <em>business objects</em> and <em>use-case objects</em> live. Normally, the outside world interacts with the Model by sending input to the use-case objects, these objects then manipulate the business ones and finally return output back to the outside world.</p>]]></description></item></channel></rss>